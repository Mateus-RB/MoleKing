//   MoleKing //
//
//   File:        [PeriodicTable.cpp]
//
//   Author(s):   ['LEEDMOL Reserch Group']
//   Site(s):     ['https://www.researchgate.net/lab/LEEDMOL-Heibbe-Cristhians-Research-Group-Heibbe-Cristhian-B-De-Oliveira']
//   Email(s):    ['heibbe@ufg.br']
//   Credits:     ['Copyright Â© 2023 LEEDMOL. All rights reserved.']
//   Date:        ['17.01.2023']
//   Version:     ['1.5.1']
//   Status:      ['Development']
//   Language:    ['C++','Python']
//   Description: ['A python module written in C++ for theoretical chemestry']


#include "SampleMolecules.hpp"

SampleMolecules::SampleMolecules(){

    char byteArray[] = {
  0x48, 0x2c, 0x34, 0x2e, 0x30, 0x33, 0x33, 0x30, 0x30, 0x30, 0x2c, 0x2d,
  0x32, 0x2e, 0x31, 0x39, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e,
  0x34, 0x35, 0x32, 0x30, 0x30, 0x30, 0x0a, 0x4f, 0x2c, 0x34, 0x2e, 0x39,
  0x30, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x31, 0x2e, 0x37, 0x32, 0x36,
  0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x34, 0x39, 0x33, 0x30, 0x30,
  0x30, 0x0a, 0x43, 0x2c, 0x34, 0x2e, 0x36, 0x36, 0x31, 0x30, 0x30, 0x30,
  0x2c, 0x2d, 0x30, 0x2e, 0x34, 0x33, 0x38, 0x30, 0x30, 0x30, 0x2c, 0x2d,
  0x30, 0x2e, 0x31, 0x36, 0x35, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c, 0x35,
  0x2e, 0x37, 0x37, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x34, 0x30,
  0x39, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x39, 0x30,
  0x30, 0x30, 0x0a, 0x43, 0x2c, 0x33, 0x2e, 0x33, 0x35, 0x38, 0x30, 0x30,
  0x30, 0x2c, 0x30, 0x2e, 0x30, 0x37, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x30,
  0x2e, 0x30, 0x36, 0x39, 0x30, 0x30, 0x30, 0x0a, 0x48, 0x2c, 0x36, 0x2e,
  0x37, 0x35, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x31,
  0x39, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x32, 0x34, 0x36, 0x30,
  0x30, 0x30, 0x0a, 0x43, 0x2c, 0x35, 0x2e, 0x36, 0x31, 0x32, 0x30, 0x30,
  0x30, 0x2c, 0x31, 0x2e, 0x37, 0x34, 0x36, 0x30, 0x30, 0x30, 0x2c, 0x30,
  0x2e, 0x32, 0x37, 0x35, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c, 0x32, 0x2e,
  0x31, 0x39, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x38, 0x30,
  0x39, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x31, 0x30, 0x31, 0x30,
  0x30, 0x30, 0x0a, 0x43, 0x2c, 0x33, 0x2e, 0x32, 0x32, 0x36, 0x30, 0x30,
  0x30, 0x2c, 0x31, 0x2e, 0x34, 0x32, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x30,
  0x2e, 0x34, 0x35, 0x38, 0x30, 0x30, 0x30, 0x0a, 0x48, 0x2c, 0x36, 0x2e,
  0x34, 0x38, 0x36, 0x30, 0x30, 0x30, 0x2c, 0x32, 0x2e, 0x33, 0x38, 0x39,
  0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x33, 0x35, 0x33, 0x30, 0x30, 0x30,
  0x0a, 0x43, 0x2c, 0x34, 0x2e, 0x33, 0x33, 0x31, 0x30, 0x30, 0x30, 0x2c,
  0x32, 0x2e, 0x32, 0x36, 0x37, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x35,
  0x31, 0x32, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c, 0x30, 0x2e, 0x38, 0x32,
  0x39, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x32, 0x32, 0x35, 0x30,
  0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x31, 0x33, 0x37, 0x30, 0x30, 0x30,
  0x0a, 0x4f, 0x2c, 0x32, 0x2e, 0x33, 0x32, 0x38, 0x30, 0x30, 0x30, 0x2c,
  0x2d, 0x32, 0x2e, 0x30, 0x34, 0x36, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30,
  0x2e, 0x32, 0x31, 0x38, 0x30, 0x30, 0x30, 0x0a, 0x48, 0x2c, 0x32, 0x2e,
  0x32, 0x35, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x31, 0x2e, 0x38, 0x30, 0x35,
  0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x37, 0x36, 0x31, 0x30, 0x30, 0x30,
  0x0a, 0x48, 0x2c, 0x34, 0x2e, 0x32, 0x30, 0x32, 0x30, 0x30, 0x30, 0x2c,
  0x33, 0x2e, 0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x37,
  0x33, 0x35, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c, 0x2d, 0x30, 0x2e, 0x32,
  0x34, 0x37, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x31, 0x2e, 0x30, 0x33, 0x30,
  0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x0a, 0x48, 0x2c, 0x30, 0x2e, 0x37, 0x31, 0x37, 0x30, 0x30, 0x30, 0x2c,
  0x30, 0x2e, 0x38, 0x34, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e,
  0x32, 0x37, 0x36, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c, 0x2d, 0x31, 0x2e,
  0x36, 0x34, 0x34, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x36, 0x30,
  0x31, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x31, 0x36, 0x30,
  0x30, 0x30, 0x0a, 0x48, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x30,
  0x30, 0x30, 0x2c, 0x2d, 0x32, 0x2e, 0x30, 0x39, 0x34, 0x30, 0x30, 0x30,
  0x2c, 0x30, 0x2e, 0x31, 0x33, 0x37, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c,
  0x2d, 0x32, 0x2e, 0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x31,
  0x2e, 0x34, 0x33, 0x38, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x35, 0x35,
  0x39, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c, 0x2d, 0x32, 0x2e, 0x30, 0x35,
  0x35, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x36, 0x31, 0x38, 0x30, 0x30,
  0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x35, 0x38, 0x36, 0x30, 0x30, 0x30, 0x0a,
  0x48, 0x2c, 0x2d, 0x32, 0x2e, 0x33, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2c,
  0x2d, 0x32, 0x2e, 0x33, 0x38, 0x34, 0x30, 0x30, 0x30, 0x2c, 0x31, 0x2e,
  0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c, 0x2d, 0x33, 0x2e,
  0x39, 0x36, 0x32, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x31, 0x2e, 0x30, 0x38,
  0x31, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x35, 0x37, 0x34, 0x30, 0x30,
  0x30, 0x0a, 0x48, 0x2c, 0x2d, 0x31, 0x2e, 0x33, 0x32, 0x37, 0x30, 0x30,
  0x30, 0x2c, 0x31, 0x2e, 0x32, 0x36, 0x31, 0x30, 0x30, 0x30, 0x2c, 0x2d,
  0x31, 0x2e, 0x30, 0x37, 0x33, 0x30, 0x30, 0x30, 0x0a, 0x43, 0x2c, 0x2d,
  0x33, 0x2e, 0x33, 0x38, 0x35, 0x30, 0x30, 0x30, 0x2c, 0x31, 0x2e, 0x30,
  0x32, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x35, 0x33, 0x39,
  0x30, 0x30, 0x30, 0x0a, 0x48, 0x2c, 0x2d, 0x34, 0x2e, 0x37, 0x31, 0x37,
  0x30, 0x30, 0x30, 0x2c, 0x2d, 0x31, 0x2e, 0x37, 0x32, 0x30, 0x30, 0x30,
  0x30, 0x2c, 0x31, 0x2e, 0x30, 0x31, 0x36, 0x30, 0x30, 0x30, 0x0a, 0x43,
  0x2c, 0x2d, 0x34, 0x2e, 0x33, 0x32, 0x34, 0x30, 0x30, 0x30, 0x2c, 0x30,
  0x2e, 0x31, 0x33, 0x34, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x30,
  0x30, 0x31, 0x30, 0x30, 0x30, 0x0a, 0x48, 0x2c, 0x2d, 0x33, 0x2e, 0x37,
  0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x31, 0x2e, 0x39, 0x39, 0x30, 0x30,
  0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x39, 0x30, 0x36, 0x30, 0x30, 0x30,
  0x0a, 0x4e, 0x2c, 0x2d, 0x35, 0x2e, 0x37, 0x34, 0x36, 0x30, 0x30, 0x30,
  0x2c, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30,
  0x2e, 0x30, 0x34, 0x38, 0x30, 0x30, 0x30, 0x0a, 0x4f, 0x2c, 0x2d, 0x36,
  0x2e, 0x30, 0x34, 0x33, 0x30, 0x30, 0x30, 0x2c, 0x31, 0x2e, 0x35, 0x38,
  0x39, 0x30, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x35, 0x36, 0x37, 0x30,
  0x30, 0x30, 0x0a, 0x4f, 0x2c, 0x2d, 0x36, 0x2e, 0x35, 0x36, 0x32, 0x30,
  0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x33, 0x30, 0x32, 0x30, 0x30, 0x30,
  0x2c, 0x30, 0x2e, 0x34, 0x33, 0x38, 0x30, 0x30, 0x30
};
    cout << "Size of ByteArray: " << sizeof(byteArray) << endl;
    char sampleMol[sizeof(byteArray) + 1];
    cout << "Size of sampleMol: " << sizeof(sampleMol) << endl;
    memcpy(sampleMol, byteArray, sizeof(byteArray));
    sampleMol[sizeof(byteArray)] = 0;
    this->makeString(byteArray, 0x0a);
    pair<string, char*> p = make_pair("mol1", sampleMol);
    this->sampleMoleculesMap.insert(p);


};

vector<vector<string>> SampleMolecules::getSampleMoleculesVector(string mol){
    vector<vector<string>> temp;
    //cout << this->sampleMoleculesMap[mol] << endl;
    cout << "-----------------------------" << endl;
    vector<string> v = customSplit(this->sampleMoleculesMap[mol], 0x0a);

    //print v on terminal 
    //cout << "Size of splited vector: " << v.size() << endl;
   for (int i = 0; i < v.size(); i++){
        vector<string> temp2 = customSplit(v[i], 0x2c);
        //cout << temp2[0] << ' ' << temp2[1] << ' ' << temp2[2] << ' ' << temp2[3] << endl;
        temp.push_back(temp2);
    }
    return temp;
};

vector<string> SampleMolecules::customSplit(string str, char separator) 
{   
    vector<string> tokens;
    istringstream iss(str);
    string token;

    while (getline(iss, token, separator)) 
    {
        if (!token.empty()) {  // Skip empty tokens
            tokens.push_back(token);
        }
    };
    return tokens;
};

SampleMolecules::~SampleMolecules(){
    this->sampleMoleculesMap.clear();
};

vector<string> SampleMolecules::makeString(char myChar[945], char sep){
    //print every element in myChar 
    cout << "Size of myChar: " << sizeof(myChar) << endl;
    for (int i = 0; i < sizeof(myChar); i++){
        cout << myChar[i] << ' ';
    }
    cout << endl;
    vector<string> temp;
    return temp;

}


